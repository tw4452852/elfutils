const std = @import("std");

pub fn build(b: *std.Build) void {
    const upstream = b.dependency("elfutils", .{});

    const config_header = b.addConfigHeader(.{ .style = .{ .autoconf = .{ .path = "config.h.in" } } }, .{
        .CHECK_UNDEFINED = 0,
        .DEFAULT_AR_DETERMINISTIC = false,
        .DUMMY_LIBDEBUGINFOD = 1,
        .ENABLE_DEBUGINFOD = null,
        .ENABLE_LIBDEBUGINFOD = 1,
        .ENABLE_NLS = 1,
        .HAVE_CFLOCALECOPYPREFERREDLANGUAGES = null,
        .HAVE_CFPREFERENCESCOPYAPPVALUE = null,
        .HAVE_CXX11 = 1,
        .HAVE_DCGETTEXT = 1,
        .HAVE_DECL_MEMPCPY = 1,
        .HAVE_DECL_MEMRCHR = 1,
        .HAVE_DECL_POWEROF2 = 1,
        .HAVE_DECL_RAWMEMCHR = 1,
        .HAVE_DECL_REALLOCARRAY = 1,
        .HAVE_DECL_STRERROR_R = 1,
        .HAVE_ERROR_H = 1,
        .HAVE_ERR_H = 1,
        .HAVE_EXECINFO_H = 1,
        .HAVE_FALLTHROUGH = 1,
        .HAVE_GCC_STRUCT = null,
        .HAVE_GETRLIMIT = 1,
        .HAVE_GETTEXT = 1,
        .HAVE_ICONV = null,
        .HAVE_INTTYPES_H = 1,
        .HAVE_MREMAP = 1,
        .HAVE_PROCESS_VM_READV = 1,
        .HAVE_PTHREAD_SETNAME_NP = 1,
        .HAVE_SCHED_GETAFFINITY = 1,
        .HAVE_SCHED_H = 1,
        .HAVE_STDATOMIC_H = 1,
        .HAVE_STDINT_H = 1,
        .HAVE_STDIO_H = 1,
        .HAVE_STDLIB_H = 1,
        .HAVE_STRERROR_R = 1,
        .HAVE_STRINGS_H = 1,
        .HAVE_STRING_H = 1,
        .HAVE_SYS_RESOURCE_H = 1,
        .HAVE_SYS_STAT_H = 1,
        .HAVE_SYS_TYPES_H = 1,
        .HAVE_SYS_USER_REGS = 1,
        .HAVE_UNISTD_H = 1,
        .HAVE_VISIBILITY = 1,
        .PACKAGE = "elfutils",
        .PACKAGE_BUGREPORT = "https://sourceware.org/bugzilla",
        .PACKAGE_NAME = "elfutils",
        .PACKAGE_STRING = "elfutils 0.190",
        .PACKAGE_TARNAME = "elfutils",
        .PACKAGE_URL = "http://elfutils.org/",
        .PACKAGE_VERSION = "0.190",
        .SIZEOF_LONG = 8,
        .STDC_HEADERS = 1,
        .STRERROR_R_CHAR_P = 1,
        .USE_BZLIB = 1,
        .USE_DEMANGLE = 1,
        .USE_LOCKS = null,
        .USE_LZMA = 1,
        .USE_ZLIB = 1,
        .USE_ZSTD = 1,
        .USE_ZSTD_COMPRESS = 1,
        .VERSION = "0.190",
        .YYTEXT_POINTER = 1,
        ._FILE_OFFSET_BITS = null,
        ._LARGE_FILES = null,
    });

    const libelf = b.addStaticLibrary(.{
        .name = "elf",
        .target = b.standardTargetOptions(.{}),
        .optimize = b.standardOptimizeOption(.{}),
    });

    libelf.addConfigHeader(config_header);
    libelf.linkLibC();
    libelf.addCSourceFiles(.{
        .dependency = upstream,
        .files = &.{
            "libelf/elf_version.c",
            "libelf/elf_hash.c",
            "libelf/elf_error.c",
            "libelf/elf_fill.c",
            "libelf/elf_begin.c",
            "libelf/elf_next.c",
            "libelf/elf_rand.c",
            "libelf/elf_end.c",
            "libelf/elf_kind.c",
            "libelf/gelf_getclass.c",
            "libelf/elf_getbase.c",
            "libelf/elf_getident.c",
            "libelf/elf32_fsize.c",
            "libelf/elf64_fsize.c",
            "libelf/gelf_fsize.c",
            "libelf/elf32_xlatetof.c",
            "libelf/elf32_xlatetom.c",
            "libelf/elf64_xlatetof.c",
            "libelf/elf64_xlatetom.c",
            "libelf/gelf_xlate.c",
            "libelf/elf32_getehdr.c",
            "libelf/elf64_getehdr.c",
            "libelf/gelf_getehdr.c",
            "libelf/elf32_newehdr.c",
            "libelf/elf64_newehdr.c",
            "libelf/gelf_newehdr.c",
            "libelf/gelf_update_ehdr.c",
            "libelf/elf32_getphdr.c",
            "libelf/elf64_getphdr.c",
            "libelf/gelf_getphdr.c",
            "libelf/elf32_newphdr.c",
            "libelf/elf64_newphdr.c",
            "libelf/gelf_newphdr.c",
            "libelf/gelf_update_phdr.c",
            "libelf/elf_getarhdr.c",
            "libelf/elf_getarsym.c",
            "libelf/elf_rawfile.c",
            "libelf/elf_readall.c",
            "libelf/elf_cntl.c",
            "libelf/elf_getscn.c",
            "libelf/elf_nextscn.c",
            "libelf/elf_ndxscn.c",
            "libelf/elf_newscn.c",
            "libelf/elf32_getshdr.c",
            "libelf/elf64_getshdr.c",
            "libelf/gelf_getshdr.c",
            "libelf/gelf_update_shdr.c",
            "libelf/elf_strptr.c",
            "libelf/elf_rawdata.c",
            "libelf/elf_getdata.c",
            "libelf/elf_newdata.c",
            "libelf/elf_getdata_rawchunk.c",
            "libelf/elf_flagelf.c",
            "libelf/elf_flagehdr.c",
            "libelf/elf_flagphdr.c",
            "libelf/elf_flagscn.c",
            "libelf/elf_flagshdr.c",
            "libelf/elf_flagdata.c",
            "libelf/elf_memory.c",
            "libelf/elf_update.c",
            "libelf/elf32_updatenull.c",
            "libelf/elf64_updatenull.c",
            "libelf/elf32_updatefile.c",
            "libelf/elf64_updatefile.c",
            "libelf/gelf_getsym.c",
            "libelf/gelf_update_sym.c",
            "libelf/gelf_getversym.c",
            "libelf/gelf_getverneed.c",
            "libelf/gelf_getvernaux.c",
            "libelf/gelf_getverdef.c",
            "libelf/gelf_getverdaux.c",
            "libelf/gelf_getrel.c",
            "libelf/gelf_getrela.c",
            "libelf/gelf_update_rel.c",
            "libelf/gelf_update_rela.c",
            "libelf/gelf_getdyn.c",
            "libelf/gelf_update_dyn.c",
            "libelf/gelf_getmove.c",
            "libelf/gelf_update_move.c",
            "libelf/gelf_getsyminfo.c",
            "libelf/gelf_update_syminfo.c",
            "libelf/gelf_getauxv.c",
            "libelf/gelf_update_auxv.c",
            "libelf/gelf_getnote.c",
            "libelf/gelf_xlatetof.c",
            "libelf/gelf_xlatetom.c",
            "libelf/nlist.c",
            "libelf/gelf_getsymshndx.c",
            "libelf/gelf_update_symshndx.c",
            "libelf/gelf_update_versym.c",
            "libelf/gelf_update_verneed.c",
            "libelf/gelf_update_vernaux.c",
            "libelf/gelf_update_verdef.c",
            "libelf/gelf_update_verdaux.c",
            "libelf/elf_getphdrnum.c",
            "libelf/elf_getshdrnum.c",
            "libelf/elf_getshdrstrndx.c",
            "libelf/gelf_checksum.c",
            "libelf/elf32_checksum.c",
            "libelf/elf64_checksum.c",
            "libelf/libelf_crc32.c",
            "libelf/libelf_next_prime.c",
            "libelf/elf_clone.c",
            "libelf/gelf_getlib.c",
            "libelf/gelf_update_lib.c",
            "libelf/elf32_offscn.c",
            "libelf/elf64_offscn.c",
            "libelf/gelf_offscn.c",
            "libelf/elf_getaroff.c",
            "libelf/elf_gnu_hash.c",
            "libelf/elf_scnshndx.c",
            "libelf/elf32_getchdr.c",
            "libelf/elf64_getchdr.c",
            "libelf/gelf_getchdr.c",
            "libelf/elf_compress.c",
            "libelf/elf_compress_gnu.c",
        },
        .flags = &.{
            "-DHAVE_CONFIG_H",
            "-D_GNU_SOURCE",
        },
    });
    libelf.addIncludePath(.{ .dependency = .{
        .dependency = upstream,
        .sub_path = "lib",
    } });
    libelf.addIncludePath(.{ .dependency = .{
        .dependency = upstream,
        .sub_path = "libelf",
    } });

    b.installArtifact(libelf);
}
